#!/usr/bin/env python3
"""
Example dyndns script which uses dnsmask caching newsserver.
It intended to run as cgi, but it is no problem to rewrite it to use
wsgi or some python-based webserver.

It handles get request only and extracts just two fields - hostname and
myip.

FILENAME should me name of the file which is included into dnsmasq
configuration with addn-host directive. This file should be writable by
user, which your webserver runs under (www-data).

It needs some way to send HUP signal to dnsmasq server. I use external
program hup_server which can be installed setuid root.

If you know better way to force dnsmasq reload some configuration file
without elevated privileges, let me know.

URI of this script should be protected by basic authentication on
web-server level. Although, there is now no way to specify which user
have right to change which DNS records.

"""
import sys
import traceback
import os
import urllib.parse

# ========= CONFIGURATION ==========================
# filename which is writable to CGI and passed to dnsmasq as addn-hosts
FILENAME = "/var/lib/misc/dyndns.hosts"
# shell command to send HUP signal to dnsmasq daemon from unprivileged
# user
HUP_SCRIPT = "/usr/local/sbin/hup_daemon /var/run/dnsmasq/dnsmasq.pid"
# ========= END CONFIGURATION ==========================

def htresult(code, msg):
    """
    Returns HTTP status code with plain-text message to HTTP client
    """
    status = {200:'200 OK', 401:'401 UNAUTHORIZED', 404:'404 NOT FOUND',
              403:'403 FORBIDDEN', 500:'500 SERVER ERROR'}
    if code in status:
        print("Status: " + status[code])
    else:
        print(code)
    print("Content-Type: text/plain\n")
    print(msg)
    sys.exit(0)

def main():
    """
    Does the main job
    Returns tuple of status code and message
    """
    # Get info from CGI environment
    form = urllib.parse.parse_qs(os.environ['QUERY_STRING'])
    hostnames = form["hostname"]
    address = form.get("myip",None)
    if not address:
        address = form.get("myipv6",None)
    if not address or address[0] == "auto":
        address = os.environ['REMOTE_ADDR']
    else:
        address = address[0]
    if not hostnames:
        return (404, "No hostname parameter in the URL")

    hostname = hostnames[0]
    out = ""
    hostnames = hostname.split(".")
    # add unqualified name to the host line
    if len(hostnames) > 1:
        hostnames = [hostname, hostnames[0]]
    else:
        hostnames = [hostname]

    with open(FILENAME, "r+", encoding="utf-8") as f: # pylint:disable=invalid-name
        # Read hosts file and preserve everything
        # which is not related to our name and IP address
        for line in f.read().split("\n"):
            # skip empty lines
            if line == "":
                continue
            # Never skip comments
            if not line.startswith("#"):
                fields = line.split()
                # skip line with our IP - it is our now
                if fields[0] == address:
                    continue
                # skip line with our name
                if hostname in fields[1:]:
                    continue
            # add all other lines to new file content
            out += line + "\n"

        # add our address and names
        out += address +"\t" + " ".join(hostnames) + "\n"
        f.seek(0, 0)
        f.write(out)
    os.system(HUP_SCRIPT)
    # Return success status to http client
    return (200, "OK")


try:
    htresult(*main())
except Exception as exc: # pylint: disable=broad-except
    htresult(500, str(exc)+"\n"+traceback.format_exc())
